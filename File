--Stackdump--sp_recompile p_SystemUserBuEntityMapReinit
-- Extended Events file detail:/*-- Find DB_IDSELECT DB_ID(N'CRM1P_MSCRM') AS [Database ID];GO
OR
SELECT name as Database_Name, database_id as Database_ID FROM sys.databases;
-- Find objectid from any specific database - sys.objectsUSE CRM4S01_MSCRM;GOSELECT DISTINCT OBJECT_NAME(object_id)FROM master.sys.objects;GO
select * from sys.objects where name like '%reinit%'
*/--- CRM Database GrowthSET NOCOUNT ONDECLARE @endDate datetime, @months smallint; SET @endDate = GetDate();  SET @months = 12;          
;WITH HIST AS    (SELECT BS.database_name AS DatabaseName           ,YEAR(BS.backup_start_date) * 100             + MONTH(BS.backup_start_date) AS YearMonth           ,CONVERT(numeric(10, 1), MIN(BS.backup_size / 1048576.0)) AS MinSizeMB           ,CONVERT(numeric(10, 1), MAX(BS.backup_size / 1048576.0)) AS MaxSizeMB           ,CONVERT(numeric(10, 1), AVG(BS.backup_size / 1048576.0)) AS AvgSizeMB     FROM msdb.dbo.backupset as BS     /*WHERE NOT BS.database_name IN               ('master', 'msdb', 'model', 'tempdb','CRM_History','CRM_Integration_PRD',     'CrmDataMigration','MSCRM_CONFIG','ReportServer','ReportServerTempDB','NM_DBA_Maint',     'CRM_Integration_STG_02','CRM1S01_MSCRM','CRM2P_MSCRM','CRM3DLEO_MSCRM','CRM3S01_MSCRM') */ WHERE BS.database_name = 'CRM1P_MSCRM' -- Database name -- BS.database_name = 'CRM_History'          AND BS.type = 'D'           AND BS.backup_start_date BETWEEN DATEADD(mm, - @months, @endDate) AND     @endDate     GROUP BY BS.database_name             ,YEAR(BS.backup_start_date)             ,MONTH(BS.backup_start_date)) SELECT @@SERVERNAME as ServerName      ,MAIN.DatabaseName       ,MAIN.YearMonth       ,MAIN.MinSizeMB       ,MAIN.MaxSizeMB       ,MAIN.AvgSizeMB       ,MAIN.AvgSizeMB         - (SELECT TOP 1 SUB.AvgSizeMB           FROM HIST AS SUB           WHERE SUB.DatabaseName = MAIN.DatabaseName                 AND SUB.YearMonth < MAIN.YearMonth           ORDER BY SUB.YearMonth DESC) AS GrowthMB FROM HIST AS MAIN ORDER BY MAIN.DatabaseName         ,MAIN.YearMonth
--Query2:
SELECT[database_name] AS "Database",DATEPART(month,[backup_start_date]) AS "Month",AVG([backup_size]/1024/1024) AS "Backup Size MB",AVG([compressed_backup_size]/1024/1024) AS "Compressed Backup Size MB",AVG([backup_size]/[compressed_backup_size]) AS "Compression Ratio"FROM msdb.dbo.backupsetWHERE [database_name] = N'DataBaseName'AND [type] = 'D'GROUP BY [database_name],DATEPART(mm,[backup_start_date]);
--Query to run in NM_DBA_Maint to look for tempdb data:
-- To get tempdb detail for Stack dump issue:--use NM_DBA_Maint--go--select * from tbl_tempdb_tables where Runtime > '2016-03-29 00:00:00' order by Runtime--go--select * from tbl_tempdb_partitions where Runtime > '2016-03-29 00:00:00' order by Runtime--go--select * from tbl_tempdb_allocation_units where Runtime > '2016-03-29 00:00:00' order by Runtime--go--select * from tbl_tempdb_system_internals_allocation_units where Runtime > '2016-03-29 00:00:00' order by Runtime--go
-- SQL Server: Get All Databases Size
--SELECT d.name,--ROUND(SUM(mf.size) * 8 / 1024, 0) Size_MBs--FROM sys.master_files mf--INNER JOIN sys.databases d ON d.database_id = mf.database_id--WHERE d.database_id > 4 -- Skip system databases--GROUP BY d.name--ORDER BY d.name
-- To chec CRM1P_MSCRM.dbo.ActivityPointerBase index fragmentation:-- I ran the following last night on NT7153 to check fragmentation in ActivityPointerBase that was over 4%.   -- Note the “@Execute = ‘N’”  line so that it just reports on what it would do.
--use master--go--EXECUTE dbo.IndexOptimize @Databases = 'CRM1P_MSCRM',--@FragmentationLow = NULL,--@FragmentationMedium = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',--@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',--@FragmentationLevel1 = 4, -- Change no as per requirement--@FragmentationLevel2 = 30,--@SortInTempdb = 'Y',--@MaxDOP = 8,--@Execute = 'N',--@Indexes = 'CRM1P_MSCRM.dbo.ActivityPointerBase'--go
/*--- Query which collects PSSDiag information:select getdate() as runtime, *  --into tbl_QueryHashByCPUfrom(SELECT TOP 10 query_hash, COUNT (distinct query_plan_hash) as 'distinct query_plan_hash count',       sum(execution_count) as 'execution_count',         sum(total_worker_time) as 'total_worker_time',       SUM(total_elapsed_time) as 'total_elapsed_time',       SUM (total_logical_reads) as 'total_logical_reads',           max(REPLACE (REPLACE (SUBSTRING (st.[text], qs.statement_start_offset/2 + 1,       CASE WHEN qs.statement_end_offset = -1 THEN LEN (CONVERT(nvarchar(max), st.[text]))         ELSE qs.statement_end_offset/2 - qs.statement_start_offset/2 + 1      END), CHAR(13), ' '), CHAR(10), ' '))  AS sample_statement_textFROM sys.dm_exec_query_stats AS qsCROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS stgroup by query_hashORDER BY sum(total_worker_time) DESC) t*/




